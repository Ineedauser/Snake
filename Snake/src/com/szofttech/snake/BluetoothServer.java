package com.szofttech.snake;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.UUID;

import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothServerSocket;
import android.bluetooth.BluetoothSocket;
import android.util.Log;

public class BluetoothServer {
	//This is how many RFCOMM connections is supported by the program. The maximal
	//number can be 7.
	public final int MAX_CONNECTIONS=7;
	
	//Version 1 UUID-s generated by http://www.uuidgenerator.net/
	public final UUID [] uuids={
			UUID.fromString("339128c2-9860-11e2-b060-f23c91aec05e"),
			UUID.fromString("33912bb0-9860-11e2-b060-f23c91aec05e"),
			UUID.fromString("33912dae-9860-11e2-b060-f23c91aec05e"),
			UUID.fromString("33912f98-9860-11e2-b060-f23c91aec05e"),
			UUID.fromString("33913178-9860-11e2-b060-f23c91aec05e"),
			UUID.fromString("33913358-9860-11e2-b060-f23c91aec05e"),
			UUID.fromString("33913538-9860-11e2-b060-f23c91aec05e")
	};
	
	private final String NAME="SnakeBluetoothServer";
	
	private volatile SnakeBluetoothSocket [] sockets;
	
	private final BluetoothAdapter bluetoothAdapter;
	
	private final String TAG="Snake.BluetoothServer";
	private AcceptThread acceptThread;

	//Synchronized with "sockets"
	private volatile int connectedClientCount;
	
	private class AcceptThread extends Thread {
    	BluetoothServerSocket serverSocket = null;
    	private volatile boolean running;
        
        public AcceptThread() {
        	running=true;
        }

        public void run() {
            setName("AcceptThread");
            BluetoothSocket socket = null;
            while (running){
            	
            	for (int i = 0; i < MAX_CONNECTIONS; i++) {
            		if (!running)
            			break;

            		try {
	            		if (sockets[i]==null){
	            			serverSocket = bluetoothAdapter.listenUsingRfcommWithServiceRecord(NAME, uuids[i]);
	            			socket = serverSocket.accept();
	            			if (socket != null) {
	            				synchronized(sockets){
	            					connectedClientCount++;
	            					sockets[i]=new SnakeBluetoothSocket(socket);
	            				}
	            			}	       
	            		}
            		} catch (IOException e) {
            			synchronized(sockets){
            				if (sockets[i]!=null){
            					sockets[i]=null;
            					connectedClientCount--;
            				}
            			}
                		Log.e(TAG, "accept() failed", e);
                		break;
                	}
            	}
            	
            }
        }

        public void cancel() {
        	stopMe();
        }
        
        public void stopMe(){
        	running=false;
            try {
            	if (serverSocket!=null)
            		serverSocket.close();
            	serverSocket=null;
            } catch (IOException e) {
                Log.e(TAG, "close() of server failed", e);
            }
        }
    }
	
	public void closeClients(){
		synchronized (sockets){
			for (int a=0; a<MAX_CONNECTIONS; a++){
				try {
					sockets[a].close();
				} catch (IOException e) {
					Log.e(TAG, "Failed to close open socket.", e);
				}
				sockets[a]=null;
			}
			
			connectedClientCount=0;
		}
	}
	
	public BluetoothServer(){
		bluetoothAdapter=BluetoothAdapter.getDefaultAdapter();
		
		sockets=new SnakeBluetoothSocket[MAX_CONNECTIONS];
		for (int a=0; a<MAX_CONNECTIONS; a++)
			sockets[a]=null;
	}
	
	public void startListening(){
		closeClients();
		acceptThread=new AcceptThread();
		acceptThread.run();
	}
	
	public void stopListening(){
		acceptThread.stopMe();
		acceptThread=null;
	}
	
	public int getNumberOfClients(){
		int result;
		synchronized (sockets){
			result=connectedClientCount;
		}
		return result;
	}

	public SnakeBluetoothSocket getClient(int client){
		if (client<0 || client>=MAX_CONNECTIONS){
			 throw new IllegalArgumentException("Invalid client number");
		}
		
		SnakeBluetoothSocket result;
		
		synchronized (sockets){
			result=sockets[client];
		}
		
		if (result==null){
			throw new RuntimeException("Trying to send data to non-existent Bluetooth device.");
		}
		
		return result;
	}
	
	/*int [] getClientList(){
		synchronized (sockets){
			int [] result=new int[connectedClientCount];
			int pos=0;
			for (int a=0; a<MAX_CONNECTIONS; a++){
				
			}
		}
	}*/
}
